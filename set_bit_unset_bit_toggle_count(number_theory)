import numpy as np
def power(a, b):
    result = 1
    while b:
        if b & 1:
            result = result * a
        a = a * a
        b >>= 1
    return result

def printbinary(num):
    for i in range(10,-1,-1):
        print((num >> i) & 1,end='')
    print()
def is_bit_set(num,pos):
    if num & (1 >> pos) != 0:
        return True
    else:
        return False

def unset_bit(num,pos):
    return num & (~(1 << pos))

def set_bit(num,pos):
    return num | (1 << pos)

def toggle(num,pos):
    return num ^ (1 << pos)

def count_ones(num):
    count = 0
    for i in range(0,10):
        if num & (1 << i) != 0:
            count+=1

    return count

if __name__ == "__main__":
    x = 9
    printbinary(x)
    i = 1
    if is_bit_set(x,i):
        print("Bit is set")
    else:
        print("bit is not set")

    printbinary(x)
    printbinary(set_bit(x,2))
    printbinary(unset_bit(x,3))
    printbinary(toggle(x,2))
    print(count_ones(x))
